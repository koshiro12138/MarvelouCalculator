from tkinter import *from tkinter.ttk import *import FunctionsForFrame as FFFdef calc(text):    """用eval方法计算表达式字符串"""    try:        if (sep_flag.get() == 0):            return eval(FFF.del_sep(text))        else:            return FFF.add_sep(str(eval(FFF.del_sep(text))))    except (SyntaxError, ZeroDivisionError, NameError):        return 'Error'def present_value():#现值计算    print(' ')    x = eval(input('  Payment per period: '))    n = eval(input('  Number of payments: '))    i = eval(input('  Interest rate:      '))    if i >= 1:        i = i / 100.00    return x * (1 - ((1 + i) ** -n)) / idef future_value():#终值计算    print(' ')    x = eval(input('  Payment per period: '))    n = eval(input('  Number of payments: '))    i = eval(input('  Interest rate:      '))    if i >= 1:        i = i / 100.00    return x * (((1 + i) ** n) - 1) / idef simple_interest():#单利终值计算    print(' ')    P = eval(input('  The starting value: '))    i = eval(input('  Interest rate:      '))    n = eval(input('  Number of years:    '))    if i >= 1:        i = i / 100.00    return P * (1 + n * i)def compound_interest():    print(' ')    P = eval(input('  The starting value: '))    i = eval(input('  Interest rate:      '))    r = int(input('  Compounded:1: Monthly\n         2:Quarter\n           3:HalfYear\n         4: Yearly\n=> '))    if r in (1, 2, 3, 4):        n = int(input('  Number of years:    '))        if i >= 1:            i = i / 100.00        if r == 1:            i = i / 12.00            n = n * 12            return P * (1 + i) ** n        if r == 2:            i = i / 4.00            n = n * 4            return P * (1 + i) ** n        if r == 1:            i = i / 2.00            n = n * 2            return P * (1 + i) ** n        elif r == 4:            return P * (1 + i) ** n    else:        print('\n  [E]\n  Please insert 1, 2, 3 or 4')        returnroot = Tk()root.title("Finance")  # 添加标题main_menu = Menu()  # 创建最上层主菜单    # 创建Calculator菜单, 并加入到主菜单calc_menu = Menu(main_menu, tearoff=0)calc_menu.add_command(label='Quit', command=lambda: exit(0))main_menu.add_cascade(label='Calculator', menu=calc_menu)    # 创建View菜单, 并加入到主菜单    # 其中"Show Thousands Separator"菜单项是一个Checkbuttontext = StringVar()sep_flag = IntVar()sep_flag.set(0)view_menu = Menu(main_menu, tearoff=0)view_menu.add_checkbutton(label='Show Thousands Separator', variable=sep_flag,                              command=lambda t=text: t.set(FFF.add_sep(t.get())))main_menu.add_cascade(label='View', menu=view_menu)root['menu'] = main_menu  # 将主菜单与root绑定# 创建统计模块菜单# st.build(main_menu)# root['menu'] = main_menu# 创建财务及金融模块菜单finance_menu = Menu(main_menu, tearoff=0)main_menu.add_command(label='金融计算')# 创建文本框Entry(root, textvariable=text).pack(expand=YES, fill=BOTH, padx=2, pady=4)style = Style()style.configure('TButton', padding=3)# 创建第一行三个按钮fedit = FFF.frame(root)FFF.button(fedit, 'Backspace', lambda t=text: t.set(FFF.back(t.get())))FFF.button(fedit, 'Clear', lambda t=text: t.set(''))FFF.button(fedit, '±', lambda t=text: t.set('-(' + t.get() + ')'))# 每行四个, 创建其余四行按钮for key in ('789/', '456*', '123-', '0.=+'):    fsymb = FFF.frame(root)    for char in key:        if char == '=':            FFF.button(fsymb, char, lambda t=text: t.set(calc(t.get())))        else:            FFF.button(fsymb, char, lambda t=text, c=char: t.set(t.get() + c))root.mainloop()
